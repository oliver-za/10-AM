{"version":3,"sources":["pages/Main/Main.js"],"names":["socket","ENDPOINT","process","PORT","Main","location","useState","name","setName","room","setRoom","message","setMessage","messages","setMessages","messageArea","useRef","inputArea","useEffect","queryString","parse","search","io","emit","error","alert","on","current","scrollTop","scrollHeight","focus","className","ref","map","msg","i","trim","toLowerCase","user","key","text","charAt","toUpperCase","slice","id","cols","rows","placeholder","value","onChange","event","target","onKeyPress","preventDefault"],"mappings":"oJAQIA,E,kEADEC,G,MAAW,aAAeC,+CAAYC,OAAQ,GAuFrCC,UApFF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACLC,mBAAS,IADJ,mBACtBC,EADsB,KAChBC,EADgB,OAELF,mBAAS,IAFJ,mBAEtBG,EAFsB,KAEhBC,EAFgB,OAGCJ,mBAAS,IAHV,mBAGtBK,EAHsB,KAGbC,EAHa,OAIGN,mBAAS,IAJZ,mBAItBO,EAJsB,KAIZC,EAJY,KAMvBC,EAAcC,mBACdC,EAAYD,mBAElBE,oBAAU,WAAO,IAAD,EACSC,IAAYC,MAAMf,EAASgB,QAA1Cd,EADM,EACNA,KAAME,EADA,EACAA,KAEdT,EAASsB,IAAGrB,GAEZS,EAAQD,GACRD,EAAQD,GAERP,EAAOuB,KAAK,OAAQ,CAAEhB,OAAME,QAAQ,SAACe,GAChCA,GACDC,MAAMD,MAGT,CAACnB,EAASgB,SAEbH,oBAAU,WACRlB,EAAO0B,GAAG,UAAW,SAAAf,GACnBG,EAAY,SAAAD,GAAQ,4BAASA,GAAT,CAAmBF,MACvCI,EAAYY,QAAQC,UAAYb,EAAYY,QAAQE,eAGtDZ,EAAUU,QAAQG,SAEnB,IAgBD,OACE,yBAAKC,UAAU,mBACb,6BAASA,UAAU,iBACjB,yBAAKA,UAAU,eACd,sCAAYtB,IAEf,yBAAKuB,IAAKjB,EAAagB,UAAU,qBAE3BlB,EAASoB,IAAI,SAACC,EAAKC,GAAN,OACb5B,EAAK6B,OAAOC,gBAAkBH,EAAII,KACjC,yBAAKP,UAAU,aAAaQ,IAAKJ,GAChC,4BAAK5B,GACL,2BAAI2B,EAAIM,OAEyB,kBAAlCN,EAAII,KAAKF,OAAOC,cAEhB,yBAAKN,UAAU,sBAAsBQ,IAAKJ,GACzC,2BAAID,EAAIM,OAET,yBAAKT,UAAU,iBAAiBQ,IAAKJ,GACpC,4BAAKD,EAAII,KAAKG,OAAO,GAAGC,cAAgBR,EAAII,KAAKK,MAAM,IACvD,2BAAIT,EAAIM,UAKhB,6BACM,8BAAUI,GAAG,WAAWC,KAAK,KAAKC,KAAK,IAAIC,YAAY,oBAAoBf,IAAKf,EAAc+B,MAAOrC,EAC3GsC,SA1CoB,SAACC,GACvBtC,EAAWsC,EAAMC,OAAOH,QA0CtBI,WAvCsB,SAACF,GACP,UAAdA,EAAMX,MACRW,EAAMG,iBACH1C,GACDX,EAAOuB,KAAK,cAAeZ,EAAS,kBAAMC,EAAW","file":"static/js/4.94c20544.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport queryString from 'query-string';\r\n\r\nimport './Main.css';\r\n\r\n\r\nconst ENDPOINT = 'localhost:' + process.env.PORT || 'localhost:5000'; \r\nlet socket;\r\n \r\nconst Main = ({ location }) => {\r\n  const [name, setName] = useState('');\r\n  const [room, setRoom] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n \r\n  const messageArea = useRef()\r\n  const inputArea = useRef()   \r\n \r\n  useEffect(() => { \r\n    const { name, room } = queryString.parse(location.search);\r\n\r\n    socket = io(ENDPOINT);\r\n\r\n    setRoom(room);\r\n    setName(name)\r\n\r\n    socket.emit('join', { name, room }, (error) => {\r\n      if(error) {\r\n        alert(error);\r\n      }\r\n    });\r\n  }, [location.search]);\r\n  \r\n  useEffect(() => {\r\n    socket.on('message', message => {\r\n      setMessages(messages => [ ...messages, message ]);\r\n      messageArea.current.scrollTop = messageArea.current.scrollHeight;\r\n    });\r\n\r\n    inputArea.current.focus()\r\n    \r\n}, []); \r\n\r\n  const onChangeHandler = (event) => {\r\n    setMessage(event.target.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); \r\n      if(message) {\r\n        socket.emit('sendMessage', message, () => setMessage(''));\r\n      }\r\n    }\r\n  }\r\n \r\n\r\n  return (\r\n    <div className=\"Main__Container\">\r\n      <section className=\"Main__Section\">\r\n        <div className=\"Main__Brand\"> \r\n         <h1>Room: #{room}</h1>\r\n        </div>\r\n      <div ref={messageArea} className=\"Main__MessageArea\">\r\n          {\r\n            messages.map((msg, i) =>\r\n            name.trim().toLowerCase() === msg.user ?\r\n            (<div className=\"Main__Sent\" key={i}>\r\n              <h4>{name}</h4> \r\n              <p>{msg.text}</p> \r\n            </div>)    \r\n           : msg.user.trim().toLowerCase() === 'automoderator' ?\r\n\r\n            (<div className=\"Main__Automoderator\" key={i}>\r\n              <p>{msg.text}</p> \r\n            </div>) :\r\n            (<div className=\"Main__Received\" key={i}>\r\n              <h4>{msg.user.charAt(0).toUpperCase() + msg.user.slice(1)}</h4> \r\n              <p>{msg.text}</p>   \r\n            </div>)\r\n            )\r\n          }   \r\n      </div> \r\n      <div> \r\n            <textarea id=\"textarea\" cols=\"30\" rows=\"1\" placeholder=\"Type something...\" ref={inputArea}    value={message}\r\n      onChange={onChangeHandler}\r\n      onKeyPress={onKeyPressHandler}></textarea>\r\n      </div>  \r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"sourceRoot":""}